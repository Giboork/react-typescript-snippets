{
	// Place your global snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and 
	// description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope 
	// is left empty or omitted, the snippet gets applied to all languages. The prefix is what is 
	// used to trigger the snippet and the body will be expanded and inserted. Possible variables are: 
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. 
	// Placeholders with the same ids are connected.
	// Example:
	// "Print to console": {
	// 	"scope": "javascript,typescript",
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// }
	"For_Loop": {
		"prefix": "for",
		"body": [
			"for (var ${1:index} = 0; ${1:index} < ${2:array}.length; ${1:index}++) {",
			"\tvar ${3:element} = ${2:array}[${1:index}];",
			"\t$0",
			"}"
		],
		"description": "For Loop"
	},
	"Action": {
		"prefix": "action",
		"body": [
			"${2:action} = '${1:reducer}/${2:action}',",
			"${2:action}_SUCCESS = '${1:reducer}/${2:action}_SUCCESS',",
			"${2:action}_FAILURE = '${1:reducer}/${2:action}_FAILURE',",
		],
		"description": "Action for redux"
	},
	"FAction": {
		"prefix": "faction",
		"body": [
			"export function ${1:actionName}(${3:param}): AnyAction {",
			"\treturn {",
			"\t\ttype: Types.${2:actionNameEnum},",
			"\t\tpayload: {",
			"\t\t\t${4:param},",
			"\t\t},",
			"\t};",
			"}",
			"export function ${1:actionName}Success(${5:param}): AnyAction {",
			"\treturn {",
			"\t\ttype: Types.${2:actionNameEnum}_SUCCESS,",
			"\t\tpayload: {",
			"\t\t\t${6:param},",
			"\t\t},",
			"\t};",
			"}",
			"export function ${1:actionName}Failure(error: Error): AnyAction {",
			"\treturn {",
			"\t\ttype: Types.${2:actionNameEnum}_FAILURE,",
			"\t\tpayload: { error },",
			"\t};",
			"}",
		],
		"description": "Action for redux"
	},
	"Constructor": {
		"prefix": "con",
		"body": [
			"constructor(props) {",
			"\tsuper(props);",
			"}",
		],
		"description": "React constructor"
	},
	"Loggy": {
		"prefix": "loggy",
		"body": [
			"console.log('${1}: ', $1);$2"
		],
		"description": "Log variable (or whatever) including a label to console"
	},
	"Function": {
		"prefix": "fn",
		"body": [
			"function ${1:init}($2) {",
			"  $3",
			"}$4"
		],
		"description": "A plain JS function"
	},
	"Log": {
		"prefix": "clog",
		"body": [
			"console.log($1);$2"
		],
		"description": "Log variable (or whatever) to console"
	},
	"Timer": {
		"prefix": "timer",
		"body": [
			"console.time('${1:function}');",
			"console.timeEnd('${1:function}');$2"
		],
		"description": "Back to the future"
	},
	"React Component": {
		"prefix": "comp",
		"body": [
			"import React from 'react';",
			"",
			"interface Props {",
			"}",
			"",
			"export default class ${1:} extends React.Component<Props> {",
			" render() {",
			"  return (",
			"   <div>",
			"    ${2:}",
			"   </div>",
			"  );",
			" }",
			"}",
			""
		],
		"description": "Create a React Component with typescript."
	},
	"React Component - Full": {
		"prefix": "compfull",
		"body": [
			"import React from 'react';",
			"",
			"interface Props {",
			"}",
			"",
			"interface State {",
			"}",
			"",
			"export default class ${1:} extends React.Component<Props, State> {",
			" constructor(props: Props) {",
			"  super(props);",
			"",
			"    this.state = {",
			"  }",
			" }",
			"",
			" render() {",
			"  return (",
			"   <div>",
			"    ${2:}",
			"   </div>",
			"  );",
			" }",
			"}",
			""
		],
		"description": "Create a stateful React Component with typescript with Props, State, and a constructor."
	},
	"React PureComponent": {
		"prefix": "comppure",
		"body": [
			"import React from 'react';",
			"",
			"interface Props {",
			"}",
			"",
			"export default class ${1:} extends React.PureComponent<Props, any> {",
			" render() {",
			"  return (",
			"   <div>",
			"    ${2:}",
			"   </div>",
			"  );",
			" }",
			"}",
			""
		],
		"description": "Create a React PureComponent."
	},
	"React Stateless Functional Component": {
		"prefix": "comparrow",
		"body": [
			"import React from 'react';",
			"",
			"interface Props {$2",
			"}",
			"",
			"const ${1:App}: React.SFC<Props> = (props: Props) => {",
			" return null;",
			"};",
			"",
			"export default $1;"
		],
		"description": "Create a React Stateless Functional Component."
	},
	"componentWillMount": {
		"prefix": "cwm",
		"body": [
			"componentWillMount() {",
			" ${1:}",
			"}"
		],
		"description": "Invoked immediately before mounting occurs. It is called before render()."
	},
	"render": {
		"prefix": "ren",
		"body": [
			"render() {",
			" return (",
			"  ${1:}",
			" );",
			"}"
		],
		"description": "When called, it should examine this.props and this.state and return a single React element."
	},
	"componentDidMount": {
		"prefix": "cdm",
		"body": [
			"componentDidMount() {",
			" ${1:}",
			"}"
		],
		"description": "Invoked immediately after a component is mounted."
	},
	"componentWillReceiveProps": {
		"prefix": "cwrp",
		"body": [
			"componentWillReceiveProps(nextProps: ${1:}) {",
			" ${2:}",
			"}"
		],
		"description": "Invoked before a mounted component receives new props."
	},
	"shouldComponentUpdate": {
		"prefix": "scu",
		"body": [
			"shouldComponentUpdate(nextProps: ${1:}, nextState) {",
			" ${2:}",
			"}"
		],
		"description": "Invoked before rendering when new props or state are being received."
	},
	"componentWillUpdate": {
		"prefix": "cwu",
		"body": [
			"componentWillUpdate(nextProps: ${1:}, nextState) {",
			" ${2:}",
			"}"
		],
		"description": "Invoked immediately before rendering when new props or state are being received."
	},
	"componentDidUpdate": {
		"prefix": "cdu",
		"body": [
			"componentDidUpdate(prevProps: ${1:}, prevState) {",
			" ${2:}",
			"}"
		],
		"description": "Invoked immediately after updating occurs. This method is not called for the initial render"
	},
	"componentWillUnmount": {
		"prefix": "cwum",
		"body": [
			"componentWillUnmount() {",
			" ${1:}",
			"}"
		],
		"description": "Invoked immediately before a component is unmounted and destroyed"
	},
	"bind method": {
		"prefix": "bnd",
		"body": [
			"this.${1:} = this.${1:}.bind(this);"
		],
		"description": "bind this in method"
	},
	"import": {
		"prefix": "imp",
		"body": [
			"import { $2 } from '$1';"
		],
		"description": "Create a import"
	},
	"React redux container": {
		"prefix": "compcon",
		"body": [
			"import React from 'react';",
			"import { connect } from 'react-redux';",
			"",
			"interface Props {",
			"}",
			"",
			"class ${1:} extends React.Component<Props, any> {",
			" render() {",
			"  return (",
			"   <div>",
			"    ${2:}",
			"   </div>",
			"  );",
			" }",
			"}",
			"",
			"const mapStateToProps = (state: any) => {",
			" return {",
			" };",
			"}",
			"",
			"export default connect(mapStateToProps)(${1:});",
			""
		],
		"description": "React Redux container"
	},
	"Styled components": {
		"prefix": "styled",
		"body": [
			"import styled from 'styled-components';",
			"",
			"export const ${1:name} = styled.${2:element}``;",
			"",
		],
		"description": "React Redux container"
	},
	"Connect": {
		"prefix": "connect",
		"body": [
			"@(connect((state: any) =>",
			"({}),",
			"null) as any)",
		],
		"description": "connect"
	},
	"Full block position absolute": {
		"prefix": "abs",
		"body": [
			"position: absolute;",
			"top: 0;",
			"right: 0;",
			"bottom: 0;",
			"left: 0;",
		],
		"description": "full block position absolute"
	},
}
